package com.github.njuro.jard.rewrite.userimport com.github.njuro.jard.ban.BanServiceimport com.github.njuro.jard.user.token.UserTokenServiceimport org.springframework.security.core.context.SecurityContextHolderimport org.springframework.stereotype.Serviceimport org.springframework.transaction.annotation.Transactional@Service@Transactionalclass UserService(  private val userRepository: UserRepository,  private val banService: BanService,  private val userTokenService: UserTokenService) {  /**   * Saves new user to database.   *   * @param user user to be saved   * @return saved user   */  fun saveUser(user: User): User = userRepository.save(user)  /** @return all users in database */  fun getAllUsers(): List<User> = userRepository.findAll()  /**   * Resolves user by given identifier.   *   * @param username name of the user   * @return resolved user   * @throws UserNotFoundException if such user is not found in database   */  fun resolveUser(username: String): User =    userRepository.findByUsernameIgnoreCase(username).orElseThrow(::UserNotFoundException)  /**   * Resolves user by given email   *   * @param email e-mail address to check   * @return resolved user or {@code null} if no such user is found   */  fun findUserByEmail(email: String): User? = userRepository.findByEmailIgnoreCase(email)  /**   * @param username name of the user   * @return true if user with such username exists, false otherwise   */  fun doesUserExists(username: String): Boolean =    try {      resolveUser(username)      true    } catch (ex: UserNotFoundException) {      false    }  /**   * @param email e-mail address of the user   * @return true if user with such email exists, {@code null} otherwise   */  fun doesEmailExists(email: String) = findUserByEmail(email) != null  /** @return user currently logged in the system */  fun getCurrentUser(): User? {    val authentication = SecurityContextHolder.getContext().authentication ?: return null    return authentication.principal as? User  }  /**   * Checks if currently logged user has given authority   *   * @param authority user authority to check   * @return true if current user has given authority, false otherwise   */   fun hasCurrentUserAuthority(authority: UserAuthority): Boolean =     getCurrentUser()?.authorities?.contains(authority) ?: false  /**   * Deletes given user. Also deletes him/her from all of the bans he/she created - however the bans   * remain active. Additionally, deletes all tokens issued to given user.   *   * @param user user to delete   */  fun deleteUser(user: User) {    banService.getBansBannedByUser(user).forEach {      it.bannedBy = null      banService.saveBan(it)    }    userTokenService.deleteTokensForUser(user)    userRepository.delete(user)  }}